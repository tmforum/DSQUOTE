package org.tmf.dsmapi.quote;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.tmf.dsmapi.commons.facade.AbstractFacade;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.tmf.dsmapi.commons.exceptions.BadUsageException;
import org.tmf.dsmapi.commons.exceptions.ExceptionType;
import org.tmf.dsmapi.commons.exceptions.UnknownResourceException;
import org.tmf.dsmapi.commons.utils.BeanUtils;
import org.tmf.dsmapi.quote.model.Quote;
import org.tmf.dsmapi.quote.event.QuoteEventPublisherLocal;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.tmf.dsmapi.quote.model.QuoteItem;
import org.tmf.dsmapi.quote.model.QuoteProductOfferingPrice;
import org.tmf.dsmapi.quote.model.StateQuote;
import org.tmf.dsmapi.quote.model.StateQuoteItem;

@Stateless
public class QuoteFacade extends AbstractFacade<Quote> {

    @PersistenceContext(unitName = "DSQuotePU")
    private EntityManager em;
    @EJB
    QuoteEventPublisherLocal publisher;
    StateQuoteImpl stateModel = new StateQuoteImpl();

    public QuoteFacade() {
        super(Quote.class);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public void checkCreation(Quote newQuote) throws BadUsageException, UnknownResourceException {

        Quote quoteEntity = null;
        if (null == newQuote.getVersion()
                || newQuote.getVersion().isEmpty()) {
            //newQuote.setVersion("1.0");
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "version is mandatory");
        }
        
        if (newQuote.getId() == null  && "1.0".equals(newQuote.getVersion())) {
//            throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC, "While creating Quote, id must be not null");
                //Do nothing create ok
                Logger.getLogger(QuoteFacade.class.getName()).log(Level.INFO, "Quote with autogenerated id is being posted");
        }else if ("1.0".equals(newQuote.getVersion()) && newQuote.getId().isEmpty() ) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC,
                    "Please input correct id!");
        } 
        else if (newQuote.getId() != null && !newQuote.getId().isEmpty()) {
            //quoteEntity = this.find(newQuote.getId());
            Map<String, List<String>> mutableMap = new HashMap();
            List<String> idList = new ArrayList<>();
            List<String> versionList = new ArrayList<>();
            idList.add(newQuote.getId());
            versionList.add(newQuote.getVersion());
            mutableMap.put("id", idList);
            mutableMap.put("version", versionList);
            List<Quote> resultList = findByCriteria(mutableMap, Quote.class);
            if (!resultList.isEmpty()) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC,
                        "Duplicate Exception, Quote with same id :" + newQuote.getId() + " and the version:" + 
                                newQuote.getVersion() + " alreay exists");                 
            }
        } else if ((newQuote.getId() == null || newQuote.getId().isEmpty()) && !"1.0".equals(newQuote.getVersion())) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC,
                    "The version:"+ newQuote.getVersion() +" is not 1.0 ,the quote id is mandatory.");
        }

        //verify first status
        if (null == newQuote.getState()) {
            newQuote.setState(StateQuote.IN_PROGRESS);
//            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "LifecycleState is mandatory");
        } else {
            if (!newQuote.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState " + newQuote.getState().value() + " is not the first state, attempt : " + StateQuote.IN_PROGRESS.value());
            }
        }
        if (null != newQuote.getHref()) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, 
                    "Href should be generated by system");
        }
        
        if (null == newQuote.getQuoteDate()) {
            newQuote.setQuoteDate(new Date());
        }else {
            throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, 
                    "QuoteDate should be generated by system");
        }
        
        if (null == newQuote.getEffectiveQuoteCompletionDate()) {
            newQuote.setEffectiveQuoteCompletionDate(new Date());
        }else {
            throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, 
                    "EffectiveQuoteCompletionDate should be generated by system");
        }
        
        if (null == newQuote.getCustomer()){
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "customer is mandatory");
        }

        if (null != newQuote.getValidFor()) {
            if(null != newQuote.getValidFor().getStartDateTime() && null != newQuote.getValidFor().getEndDateTime() &&
                    newQuote.getValidFor().getStartDateTime().after(newQuote.getValidFor().getEndDateTime())) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, 
                    "ValidFor endDateTime must later than startDateTime");
            }
        }
        
//      POST Mandatory attributes within product Quote item
        if (null != newQuote.getQuoteItem()
                && !newQuote.getQuoteItem().isEmpty()) {
            List<QuoteItem> l_quoteItem = newQuote.getQuoteItem();
            for (QuoteItem quoteItem : l_quoteItem) {                
                if (null == quoteItem.getState()) {
                    quoteItem.setState(StateQuoteItem.IN_PROGRESS);
                } else {
                    if (!quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.IN_PROGRESS.name())) {
                        throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState " + quoteItem.getState().value() + " is not the first state, attempt : " + StateQuote.IN_PROGRESS.value());
                    }
                }
                if (null == quoteItem.getId()
                        || quoteItem.getId().isEmpty()) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "quoteItem.id  is mandatory");
                }
                if (null == quoteItem.getProductOffering()) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "quoteItem.productOffering is mandatory");
                }
                if (null == quoteItem.getAction()
                        || quoteItem.getAction().isEmpty()) {
                    quoteItem.setAction("add");
                } else {
                    if(! quoteItem.getAction().equalsIgnoreCase("add")){
                        throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.action must be 'add' in creation");
                    }
                }
//                if (null == quoteItem.getAction()
//                        || quoteItem.getAction().isEmpty()) {
//                    throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "quoteItem.action is mandatory");
//                }
//                if (quoteItem.getAction().equalsIgnoreCase("add")) {
//                    if (null == quoteItem.getProductOffering()) {
//                        throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "quoteItem.productOffering is mandatory if action is add");
//                    } else {
//                        if ((null == quoteItem.getProductOffering().getId() || quoteItem.getProductOffering().getId().isEmpty())
//                                && (null == quoteItem.getProductOffering().getHref() || quoteItem.getProductOffering().getHref().isEmpty())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS,
//                                    "quoteItem.productOffering id AND/OR href are mandatory");
//                        }
//                    }
//                    if (null != quoteItem.getProduct()) {
//                        if ((null == quoteItem.getProduct().getProductCharacteristic()
//                                || quoteItem.getProduct().getProductCharacteristic().isEmpty())
//                                &&
//                                (null == quoteItem.getProduct().getProductRelationship()
//                                || quoteItem.getProduct().getProductRelationship().isEmpty())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "quoteItem.product.productCharacteristic or quoteItem.product.productRelationship are mandatory if action is add");
//                        }
////                        if ((null == quoteItem.getProduct().getProductRelationship()
////                                || quoteItem.getProduct().getProductRelationship().isEmpty())) {
////                            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "quoteItem.product.productRelationship is mandatory if action is add");
////                        }
//                    }
//                } else if (quoteItem.getAction().equalsIgnoreCase("modify")
//                        || quoteItem.getAction().equalsIgnoreCase("delete")) {
//                    if (null != quoteItem.getProduct()) {
//                        if ((null == quoteItem.getProduct().getId() || quoteItem.getProduct().getId().isEmpty())
//                                && (null == quoteItem.getProduct().getHref() || quoteItem.getProduct().getHref().isEmpty())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS,
//                                    "quoteItem.product id AND/OR href are mandatory  if action is 'modify' or 'delete'");
//                        }
//                    } else {
//                        throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS,
//                                "quoteItem.product is mandatory if action is 'modify' or 'delete'");
//                    }
//                }
            }
        } else {
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "quoteItem is mandatory");
        }

    
    
    }

    /**
     *find the lasted quote version by id
     */
    public Quote findQuoteById(String id) {
        Map<String, List<String>> mutableMap = new HashMap();
        List<String> idList = new ArrayList<String>();
        idList.add(id);
        mutableMap.put("id", idList);
        
        List<Quote> resultList = findByCriteria(mutableMap, Quote.class);
        if (!resultList.isEmpty()) {
            return resultList.get(0);
        }
        
        return null;
    }
    
    /**
     *find the lasted quote version by id
     */
    public List<Quote> findAllQuoteById(String id) {
        Map<String, List<String>> mutableMap = new HashMap();
        List<String> idList = new ArrayList<String>();
        idList.add(id);
        mutableMap.put("id", idList);
        
        List<Quote> resultList = findByCriteria(mutableMap, Quote.class);
        if (!resultList.isEmpty()) {
            return resultList;
        }
        
        return null;
    }
    
    public Quote findQuoteByIdAndVersion(String id, String ver) {
        Map<String, List<String>> mutableMap = new HashMap();
        List<String> idList = new ArrayList<String>();
        List<String> versionList = new ArrayList<String>();
        idList.add(id);
        versionList.add(ver);
        mutableMap.put("id", idList);
        if (null != ver){
            mutableMap.put("version", versionList);
        }       
        
        List<Quote> resultList = findByCriteria(mutableMap, Quote.class);
        if (!resultList.isEmpty()) {
            return resultList.get(0);
        }
        
        return null;
    }
    
    public Quote patchAttributs(String id, String ver, Quote partialEntity) throws UnknownResourceException, BadUsageException {
        //Quote currentEntity = this.find(id);
        Quote currentEntity = findQuoteByIdAndVersion(id, ver);

        if (currentEntity == null) {
            throw new UnknownResourceException(ExceptionType.UNKNOWN_RESOURCE);
        }

        verifyStatus(currentEntity, partialEntity);

        ObjectMapper mapper = new ObjectMapper();
        JsonNode node = mapper.convertValue(partialEntity, JsonNode.class);
        partialEntity.setId(id);
        partialEntity.setVersion(ver);
        // appel de la methode pour patcher l'entity
        
        //checkPatchAttributs(currentEntity, partialEntity);
        if (BeanUtils.patch(currentEntity, partialEntity, node)) {
            publisher.valueChangedNotification(currentEntity, new Date());
        }

        return currentEntity;
    }

    public void verifyStatus(Quote currentEntity, Quote partialEntity) throws BadUsageException {
        if (null != partialEntity.getState()) {
            stateModel.checkTransition(currentEntity.getState(), partialEntity.getState());
            publisher.statusChangedNotification(currentEntity, new Date());
        }
    }

    public void checkPatchAttributs(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException {

        if (null == newEntity){
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quote id and version is not patchable");
        }
        if (null != newEntity.getState() && !newEntity.getState().equals(entity.getState())) {
            stateModel.checkTransition(entity.getState(), newEntity.getState());
            System.out.println("About to publish statusChangedNotification ");

            publisher.statusChangedNotification(entity, new Date());
        } else {
            System.out.println("No State detectd ");
            //throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "state" + " is not found");
        }
        
        /**check quote id*/
        if (null != newEntity.getId() && !entity.getId().equals(newEntity.getId())) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "id is not patchable");
        }
        
        /**check quote href*/
        if (null != newEntity.getHref() && !entity.getHref().equals(newEntity.getHref()) ) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "href is not patchable");
        }
        
        /**check quote externalid*/
        if ((null == newEntity && null !=entity.getExternalId()) || 
                (null != newEntity && !newEntity.getExternalId().equals(entity.getExternalId()))) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "externalId not patchable");
        }
        
        /**check quote description*/
        if ((null == newEntity && null !=entity.getDescription()) || 
                (null != newEntity && !newEntity.getDescription().equals(entity.getDescription()))) {
            if (null != entity.getState() && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name()) && 
                    !entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()) ) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, 
                            "Description is patchable only when quote state is Pending or InProgress");
            }
        }

        /**check quote Category*/
        if (!entity.getCategory().equals(newEntity.getCategory())) {
            if (null != entity.getState() && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name()) && 
                    !entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()) ) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, 
                            "Category is patchable only when quote state is Pending or InProgress");
            }
        }
        
        /**check quote state*/
        checkQuoteStateForPatch(entity, newEntity);

        /**check quote version*/
        if (!entity.getVersion().equals(newEntity.getVersion())) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "version is not patchable");
        }

        /**check quotedate*/
        if (!entity.getQuoteDate().toString().equals(newEntity.getQuoteDate().toString())) {
            System.out.println((entity.getQuoteDate().toString()));
            System.out.println(newEntity.getQuoteDate().toString());
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteDate is not patchable");
        }

        /**check quote EffectiveQuoteCompletionDate*/
        if (!entity.getEffectiveQuoteCompletionDate().toString().equals(newEntity.getEffectiveQuoteCompletionDate().toString())) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "effectiveQuoteCompletionDate is not patchable");
        }

        /**check quote QuoteCompletionDate*/
        if ((null == newEntity.getQuoteCompletionDate() && null != entity.getQuoteCompletionDate()) ||
                (null != newEntity.getQuoteCompletionDate() && !entity.getQuoteCompletionDate().toString().equals(entity.getQuoteCompletionDate().toString()))){
            if(! entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteCompletionDate is patchable only when quote state is Pending");
            }
        }
        
        /**check quote ValidFor*/
        if ((null == newEntity.getValidFor() && null != entity.getValidFor()) 
                ||(null != newEntity.getValidFor() && !newEntity.getValidFor().equals(entity.getValidFor()))) {
            if( !entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "ValidFor is patchable only when quote state is Pending");
            }
            if(newEntity.getValidFor().getStartDateTime().after(newEntity.getValidFor().getEndDateTime())) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "ValidFor endDateTime must later than startDateTime");
            }
        }
        
        /**check quote BillingAccount*/
        checkBillingAccountForPatch( entity,  newEntity);
        
        /**check quote Note*/
        checkNoteForPatch( entity,  newEntity);
        
        /**check quote Customer*/
        if (!entity.getCustomer().equals(newEntity.getCustomer())) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Customer is not patchable");
        }
        
        /**check quote Characteristic*/
        checkCharacteristicForPatch( entity,  newEntity);
        
        /**check quote RelatedParty*/
        checkRelatedPartyForPatch( entity,  newEntity);
        
        /**check quote Agreement*/
        checkAgreementForPatch( entity,  newEntity);
        
        /**check quote QuoteAuthorization*/
        checkQuoteAuthorizationForPatch( entity,  newEntity);
        
        /**check quote QuoteProductOfferingPrice*/
        checkQuoteProductOfferingPriceForPatch(entity, newEntity);
        
        
        
//        if (null != newEntity.getQuoteItem()) {           
//            if (null != newEntity.getQuoteItem()
//                    && !newEntity.getQuoteItem().isEmpty()) {
//                List<QuoteItem> l_quoteItem = newEntity.getQuoteItem();
//                for (QuoteItem quoteItem : l_quoteItem) {
//                    if (null != quoteItem.getId()) {
//                        throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.id not patchable");
//                    }
//                    if (null != quoteItem.getState() && quoteItem.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) {
//                        if (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state InProgress only with Quote State Pending");
//                        }
//                        newEntity.setState(StateQuote.PENDING);
//                    }
//                    if (null != quoteItem.getState() && quoteItem.getState().name().equalsIgnoreCase(StateQuote.REJECTED.name())) {
//                        if (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.REJECTED.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state Rejected only with Quote State Rejected");
//                        }
//                        newEntity.setState(StateQuote.REJECTED);
//                    }
//                    if (null != quoteItem.getState() && quoteItem.getState().name().equalsIgnoreCase(StateQuote.APPROVED.name())) {
//                        if (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.APPROVED.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state Approved only with Quote State Approved");
//                        }
//                    }
//                    if (null != quoteItem.getAttachment()) {
//                        if ( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()))
//                                && !newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.attachment not patchable when Quote state is Pending or InProgress");
//                        }
//                    }
//                    if (null != quoteItem.getRelatedParty()) {
//                        if ( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()))
//                                && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.relatedParty not patchable when Quote state is Pending or InProgress");
//                        }
//                    }
//                    if (null != quoteItem.getProductOffering()) {
//                        if ( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()))
//                                && !newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.productOffering not patchable when Quote state is Pending or InProgress");
//                        }
//                    }
//                    if (null != quoteItem.getNote()) {
//                        if ( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()))
//                                && !newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.note not patchable when Quote state is Pending or InProgress");
//                        }
//                    }
//                    if (null != quoteItem.getItemQuoteAuthorization()) {
//                        if ( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) ||
//                              (null != quoteItem.getState()  && !quoteItem.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()))  ) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.itemQuoteAuthorization not patchable when Quote state and QuoteItem state are Pending");
//                        }
//                    }
//                    if (null != quoteItem.getItemQuoteProductOfferingPrice()) {
//                        if ( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name()))
//                                && !newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())) {
//                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteItem.itemQuoteProductOfferingPrice not patchable when Quote state is Pending or InProgress");
//                        }
//                    }
//                }
//            }
//        }

    }
    
    public void checkQuoteStateForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if (null != newEntity.getState()) {
            if (newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())) {
                if (null != newEntity.getQuoteItem()
                    && !newEntity.getQuoteItem().isEmpty()) {
                for (QuoteItem quoteItem : newEntity.getQuoteItem()) {
//                        if (null == quoteItem.getState()) {
                        quoteItem.setState(StateQuoteItem.IN_PROGRESS);
//                        } else {
//                            if (!quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.IN_PROGRESS.name())) {
//                                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state InProgress is mandatory with Quote State InProgress");
//                            }
//                        }
                    }
                }
                
            }
            if (newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) {
                if (null != entity.getQuoteItem()
                        && !entity.getQuoteItem().isEmpty()) {
                    for (QuoteItem quoteItem : entity.getQuoteItem()) {
                        if (null == quoteItem.getState()) {
                            quoteItem.setState(StateQuoteItem.IN_PROGRESS);
                        } else {
                            if ((!quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.PENDING.name()))
                                    && !quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.IN_PROGRESS.name())) {
                                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state InProgress or Pending is mandatory with Quote State Pending");
                            }
                        }
                    }
                }
                
            }
            if (newEntity.getState().name().equalsIgnoreCase(StateQuote.APPROVED.name())) {
                if (null != newEntity.getQuoteItem()
                        && !newEntity.getQuoteItem().isEmpty()) {
                    for (QuoteItem quoteItem : newEntity.getQuoteItem()) {
    //                        if (null == quoteItem.getState()) {
                            quoteItem.setState(StateQuoteItem.APPROVED);
    //                        } else {
    //                            if (!quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.APPROVED.name())) {
    //                                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state Approved is mandatory with Quote State Approved");
    //                            }
    //                        }
                    }
                }
                
            }
            if (newEntity.getState().name().equalsIgnoreCase(StateQuote.CANCELLED.name())) {
                if (null != entity.getQuoteItem()
                        && !entity.getQuoteItem().isEmpty()) {
                    for (QuoteItem quoteItem : entity.getQuoteItem()) {
                        if (null == quoteItem.getState()) {
                            quoteItem.setState(StateQuoteItem.IN_PROGRESS);
                        } else {
                            if ((!quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.PENDING.name()))
                                    && !quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.IN_PROGRESS.name())) {
                                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state InProgress or Pending is mandatory with Quote State Cancelled");
                            }
                        }
                    }
                }
                
            }
            if (newEntity.getState().name().equalsIgnoreCase(StateQuote.ACCEPTED.name())) {
                if (null != entity.getQuoteItem()
                        && !entity.getQuoteItem().isEmpty()) {
                    for (QuoteItem quoteItem : entity.getQuoteItem()) {
                        if (null == quoteItem.getState()) {
                            quoteItem.setState(StateQuoteItem.APPROVED);
                        } else {
                            if (!quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.APPROVED.name())) {
                                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state Approved is mandatory with Quote State Accepted");
                            }
                        }
                    }
                }
                
            }
            if (newEntity.getState().name().equalsIgnoreCase(StateQuote.REJECTED.name())) {
                if (null != entity.getQuoteItem()
                        && !entity.getQuoteItem().isEmpty()) {
                    for (QuoteItem quoteItem : entity.getQuoteItem()) {
                        if (null == quoteItem.getState()) {
                            quoteItem.setState(StateQuoteItem.REJECTED);
                        } else {
                            if ((!quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.REJECTED.name()))
                                    && !quoteItem.getState().name().equalsIgnoreCase(StateQuoteItem.APPROVED.name())) {
                                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState QuoteItem state Rejected or Approved is mandatory with Quote State Rejected");
                            }
                        }
                    }
                }
                
            }
        }
    }
    public void checkNoteForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if (null == newEntity.getNote()&& null != entity.getNote()) {
            if( (!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                    && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Note is patchable only when quote state is Pending or InProgress");
            }
        }else if(null != newEntity.getNote()) {
            if( null == entity.getNote() || newEntity.getNote().size()!=entity.getNote().size()) {
                if( (!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                        && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                    throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Note is patchable only when quote state is Pending or InProgress");
                }
            }else{
                for (int i=0; i<newEntity.getNote().size();i++) {
                    if(!newEntity.getNote().get(i).equals(entity.getNote().get(i))){
                        if( (!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                                && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Note is patchable only when quote state is Pending or InProgress");
                        }
                    }
                }
            }
        }
    }
    public void checkBillingAccountForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if ((null == newEntity.getBillingAccount() && null != entity.getBillingAccount())) {
            if(!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "BillingAccount is patchable only when quote state is Pending");
            }
        }else if(null != newEntity.getBillingAccount()){
            if(null == entity.getBillingAccount() || newEntity.getBillingAccount().size()!=entity.getBillingAccount().size()) {
                if(!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                    throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "BillingAccount is patchable only when quote state is Pending");
                }
            }else {
                for (int i=0; i<newEntity.getBillingAccount().size();i++) {
                    if(!newEntity.getBillingAccount().get(i).equals(entity.getBillingAccount().get(i))){
                        if(!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "BillingAccount is patchable only when quote state is Pending");
                        }
                    }
                }
            }
        }
    }
    public void checkCharacteristicForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if (null == newEntity.getCharacteristic()&& null != entity.getCharacteristic()) {
            if(!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Note is patchable only when quote state is Pending");
            }
        }else if(null != newEntity.getCharacteristic()) {
            if(null == entity.getCharacteristic() ||  newEntity.getCharacteristic().size()!=entity.getCharacteristic().size()) {
                if(!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                    throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Note is patchable only when quote state is Pending");
                }
            }else{
                for (int i=0; i<newEntity.getCharacteristic().size();i++) {
                    if(!newEntity.getCharacteristic().get(i).equals(entity.getCharacteristic().get(i))){
                        if(!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Characteristic is patchable only when quote state is Pending");
                        }
                    }
                }
            }
        }
    }
    public void checkRelatedPartyForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if (null == newEntity.getRelatedParty()&& null != entity.getRelatedParty()) {
            if( (!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                    && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "RelatedParty is patchable only when quote state is Pending or InProgress");
            }
        }else if(null != newEntity.getRelatedParty()) {
            if( null == entity.getRelatedParty() || newEntity.getRelatedParty().size()!=entity.getRelatedParty().size()) {
                if( (!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                    && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "RelatedParty is patchable only when quote state is Pending or InProgress");
            }
            }else{
                for (int i=0; i<newEntity.getRelatedParty().size();i++) {
                    if(!newEntity.getRelatedParty().get(i).equals(entity.getRelatedParty().get(i))){
                        if( (!entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                                && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "RelatedParty is patchable only when quote state is Pending or InProgress");
                        }
                    }
                }
            }
        }
    }
    public void checkAgreementForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if (null == newEntity.getAgreement()&& null != entity.getAgreement()) {
            if( (! entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                    && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Agreement is patchable only when quote state is Pending or InProgress");
            }
        }else if(null != newEntity.getAgreement()) {
            if( null == entity.getAgreement() || newEntity.getAgreement().size()!=entity.getAgreement().size()) {
                if( (! entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                        && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                    throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Agreement is patchable only when quote state is Pending or InProgress");
                }
            }else{
                for (int i=0; i<newEntity.getAgreement().size();i++) {
                    if(!newEntity.getAgreement().get(i).equals(entity.getAgreement().get(i))){
                        if( (! entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                                && !entity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "Agreement is patchable only when quote state is Pending or InProgress");
                        }
                    }
                }
            }
        }
    }
    public void checkQuoteAuthorizationForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if (null == newEntity.getQuoteAuthorization()&& null != entity.getQuoteAuthorization()) {
            if(! entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteAuthorization is patchable only when quote state is Pending");
            }
        }else if(null != newEntity.getQuoteAuthorization()) {
            if( null == entity.getQuoteAuthorization() || newEntity.getQuoteAuthorization().size()!=entity.getQuoteAuthorization().size()) {
                if(! entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                    throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteAuthorization is patchable only when quote state is Pending");
                }
            }else{
                for (int i=0; i<newEntity.getQuoteAuthorization().size();i++) {
                    if(!newEntity.getQuoteAuthorization().get(i).equals(entity.getQuoteAuthorization().get(i))){
                        if(! entity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())){
                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteAuthorization is patchable only when quote state is Pending");
                        }
                    }
                }
            }
        }
    }
    public void checkQuoteProductOfferingPriceForPatch(Quote entity, Quote newEntity) throws UnknownResourceException, BadUsageException{
        if (null == newEntity.getQuoteProductOfferingPrice()&& null != entity.getQuoteProductOfferingPrice()) {
            if( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                    && !newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteProductOfferingPrice.quotePriceAlteration is patchable only when quote state is Pending or InProgress");
            }
        }else if(null != newEntity.getQuoteProductOfferingPrice()) {
            if( null == entity.getQuoteProductOfferingPrice() || newEntity.getQuoteProductOfferingPrice().size()!=entity.getQuoteProductOfferingPrice().size()) {
                if( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                        && !newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                    throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteProductOfferingPrice.quotePriceAlteration is patchable only when quote state is Pending or InProgress");
                }
            }else{
                for (int i=0; i<newEntity.getQuoteProductOfferingPrice().size();i++) {
                    if(!newEntity.getQuoteProductOfferingPrice().get(i).equals(entity.getQuoteProductOfferingPrice().get(i))){
                        if( (null != newEntity.getState() && ! newEntity.getState().name().equalsIgnoreCase(StateQuote.PENDING.name())) 
                                && !newEntity.getState().name().equalsIgnoreCase(StateQuote.IN_PROGRESS.name())){
                            throw new BadUsageException(ExceptionType.BAD_USAGE_OPERATOR, "quoteProductOfferingPrice.quotePriceAlteration is patchable only when quote state is Pending or InProgress");
                        }
                    }
                }
            }
        }
    }
    
    
}
