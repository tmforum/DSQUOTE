{
	"id": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
	"name": "NEW TMF Quote Management API",
	"description": "",
	"order": [
		"d79291d0-d96c-9d6d-40b9-3c2f16bbf419",
		"7c5e7058-4c56-9701-be7f-e85ff5e5ce7e",
		"ed18fec3-a862-c616-3b45-7c78251bf84e",
		"99f01fbd-10f8-b3d9-c491-74c3bfd4651f",
		"3158407d-965d-f0e0-0a06-14ddc237cc65",
		"a9e7996e-f766-55d3-2d1d-d1566fbbbb4f",
		"d62f15e2-dbf1-bc92-c6e8-c01926af295e",
		"9c8c29a5-ebdb-aadb-b896-35533bddb38b",
		"4bfd8db3-b5bb-036d-7245-f112839d2fd0",
		"6c73350a-dcba-7f3a-84d9-ed046111a6a5",
		"84000cf5-233d-1854-2b1f-b816b9eaa544",
		"89566752-6274-87d9-7581-00cd7c070f79"
	],
	"folders": [],
	"timestamp": 1469150558293,
	"owner": 0,
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "3158407d-965d-f0e0-0a06-14ddc237cc65",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote/{{QUOTE_ID1}}:(version=1.0)",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains VERSION \" + dataOut.version.toString()] = dataOut.version.toString() !== \"\";\n\ntests[\"Response contains HREF \" + dataOut.href.toString()] = dataOut.href.toString() !== \"\";\n\ntests[\"Response contains QUOTE_DATE \" + dataOut.quoteDate.toString()] = dataOut.quoteDate.toString() !== \"\";\n\ntests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + dataOut.effectiveQuoteCompletionDate.toString()] = dataOut.effectiveQuoteCompletionDate.toString() !== \"\";\n\ntests[\"Response contains CUSTOMER \" ] = typeof(dataOut.customer) !== 'undefined';\n\nif( typeof(dataOut.quoteItem) !== 'undefined' && dataOut.quoteItem.length > 0) {\n    var items = dataOut.quoteItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains quoteItem ID \" + items[i].id.toString() ] = items[i].id.toString() !== \"\";\n        tests[\"Response contains quoteItem productOffering\"] = typeof(items[i].productOffering) !== 'undefined';\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469688207698,
			"name": "get quote  with id  and version",
			"description": "get quote whith id and version\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": []
		},
		{
			"id": "4bfd8db3-b5bb-036d-7245-f112839d2fd0",
			"headers": "Content-Type: application/json-patch+json\n//Accept: application/json-patch+json\n",
			"url": "{{quoteManagementApi}}/quote/{{QUOTE_ID1}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains VERSION \" + dataOut.version.toString()] = dataOut.version.toString() !== \"\";\n\ntests[\"Response contains HREF \" + dataOut.href.toString()] = dataOut.href.toString() !== \"\";\n\ntests[\"Response contains QUOTE_DATE \" + dataOut.quoteDate.toString()] = dataOut.quoteDate.toString() !== \"\";\n\ntests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + dataOut.effectiveQuoteCompletionDate.toString()] = dataOut.effectiveQuoteCompletionDate.toString() !== \"\";\n\ntests[\"Response contains CUSTOMER \" ] = typeof(dataOut.customer) !== 'undefined';\n\nif( typeof(dataOut.quoteItem) !== 'undefined' && dataOut.quoteItem.length > 0) {\n    var items = dataOut.quoteItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains quoteItem ID \" + items[i].id.toString() ] = items[i].id.toString() !== \"\";\n        tests[\"Response contains quoteItem productOffering\"] = typeof(items[i].productOffering) !== 'undefined';\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1470641795647,
			"name": "Partial update appointement json-patch with id",
			"description": " with json-patch",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": [],
			"rawModeData": "[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/note/0/text\",\n    \"value\": \"A free text for MODIFIED detailing the note\"\n  }\n]"
		},
		{
			"id": "6c73350a-dcba-7f3a-84d9-ed046111a6a5",
			"headers": "Content-Type: application/json-patch+json\n//Accept: application/json-patch+json\n",
			"url": "{{quoteManagementApi}}/quote/{{QUOTE_ID1}}:(version=1.0)",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains VERSION \" + dataOut.version.toString()] = dataOut.version.toString() !== \"\";\n\ntests[\"Response contains HREF \" + dataOut.href.toString()] = dataOut.href.toString() !== \"\";\n\ntests[\"Response contains QUOTE_DATE \" + dataOut.quoteDate.toString()] = dataOut.quoteDate.toString() !== \"\";\n\ntests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + dataOut.effectiveQuoteCompletionDate.toString()] = dataOut.effectiveQuoteCompletionDate.toString() !== \"\";\n\ntests[\"Response contains CUSTOMER \" ] = typeof(dataOut.customer) !== 'undefined';\n\nif( typeof(dataOut.quoteItem) !== 'undefined' && dataOut.quoteItem.length > 0) {\n    var items = dataOut.quoteItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains quoteItem ID \" + items[i].id.toString() ] = items[i].id.toString() !== \"\";\n        tests[\"Response contains quoteItem productOffering\"] = typeof(items[i].productOffering) !== 'undefined';\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469688795220,
			"name": "Partial update appointement json-patch with id and version",
			"description": " with json-patch",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": [],
			"rawModeData": "[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/note/0/text\",\n    \"value\": \"A free text for MODIFIED detailing the note\"\n  },\n  {\n    \"op\": \"remove\",\n    \"path\": \"/quoteItem/2\"\n  },\n  {\n    \"op\": \"remove\",\n    \"path\": \"/relatedParty/1\"\n  },\n  {\n    \"op\": \"replace\",\n    \"path\": \"/state\",\n    \"value\": \"Pending\"\n  }\n]"
		},
		{
			"id": "7c5e7058-4c56-9701-be7f-e85ff5e5ce7e",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains VERSION \" + dataOut.version.toString()] = dataOut.version.toString() !== \"\";\n\ntests[\"Response contains HREF \" + dataOut.href.toString()] = dataOut.href.toString() !== \"\";\n\ntests[\"Response contains QUOTE_DATE \" + dataOut.quoteDate.toString()] = dataOut.quoteDate.toString() !== \"\";\n\ntests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + dataOut.effectiveQuoteCompletionDate.toString()] = dataOut.effectiveQuoteCompletionDate.toString() !== \"\";\n\ntests[\"Response contains CUSTOMER \" ] = typeof(dataOut.customer) !== 'undefined';\n\npostman.setGlobalVariable(\"QUOTE_ID2\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\nvar dataIn = JSON.parse(request.data);\n\nconsole.log(\"request \" + dataIn);\nconsole.log(\"request type\" + typeof(dataIn));\n\n\nif( typeof(dataOut.quoteItem) !== 'undefined' && dataOut.quoteItem.length > 0) {\n    var items = dataOut.quoteItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains quoteItem ID \" + items[i].id.toString() ] = items[i].id.toString() !== \"\";\n        tests[\"Response contains quoteItem productOffering\"] = typeof(items[i].productOffering) !== 'undefined';\n    }\n}\nif (dataIn.externalId) {\n    tests[\"POST Body Response externalId equals Request externalId\"  ] = objectEquals(dataIn.externalId, dataOut.externalId);\n}\n\nif (dataIn.description) {\n    tests[\"POST Body Response description equals Request description\"  ] = objectEquals(dataIn.description, dataOut.description);\n}\n\nif (dataIn.notificationContact) {\n    tests[\"POST Body Response notificationContact equals Request notificationContact\"  ] = objectEquals(dataIn.notificationContact, dataOut.notificationContact);\n}\n\ntests[\"POST Body Response customer equals Request customer\"  ] = objectEquals(dataIn.customer, dataOut.customer);\n\n\nif (dataIn.validFor) {\n    tests[\"POST Body Response validFor equals Request validFor\"  ] = objectEquals(dataIn.validFor, dataOut.validFor);\n}\n\nif (dataIn.billingAccount) {\n    tests[\"POST Body Response billingAccount equals Request billingAccount\"  ] = objectEquals(dataIn.billingAccount, dataOut.billingAccount);\n}\n\nif (dataIn.note) {\n    tests[\"POST Body Response note equals Request note\"  ] = objectEquals(dataIn.note, dataOut.note);\n}\n\nif (dataIn.characteristic) {\n    tests[\"POST Body Response characteristic equals Request characteristic\"  ] = objectEquals(dataIn.characteristic, dataOut.characteristic);\n}\n\nif (dataIn.relatedParty) {\n    tests[\"POST Body Response relatedParty equals Request relatedParty\"  ] = objectEquals(dataIn.relatedParty, dataOut.relatedParty);\n}\n\nif (dataIn.agreement) {\n    tests[\"POST Body Response agreement equals Request agreement\"  ] = objectEquals(dataIn.agreement, dataOut.agreement);\n}\n\nif (dataIn.quoteAuthorization) {\n    tests[\"POST Body Response quoteAuthorization equals Request quoteAuthorization\"  ] = objectEquals(dataIn.quoteAuthorization, dataOut.quoteAuthorization);\n    \n}\n\nif (dataIn.quoteProductOfferingPrice) {\n    tests[\"POST Body Response quoteProductOfferingPrice equals Request quoteProductOfferingPrice\"  ] = objectEquals(dataIn.quoteProductOfferingPrice, dataOut.quoteProductOfferingPrice);\n}\n\ntests[\"POST Body Response quoteItem equals Request quoteItem\"  ] = objectEquals(dataIn.quoteItem, dataOut.quoteItem);\n\nfunction objectEquals(v1, v2) {\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1470640843631,
			"name": "create a  quote copy",
			"description": "create a quote\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": [],
			"rawModeData": "{\r\n\"id\":\"43\",\r\n\r\n\"externalId\":\"QuoteForTheConsumer_42\",\r\n\"description\":\"A wonderful 42 quote for brand new products\",\r\n\"category\":\"corporate\",\r\n\"state\":\"InProgress\",\r\n\"version\":\"1.0\",\r\n\r\n\"effectiveQuoteCompletionDate\":\"\",\r\n\"quoteCompletionDate\":\"2013-04-19T16:42:23+08:00\",\r\n\"notificationContact\":\"bill.dupont@hotmail.com\",\r\n\"validFor\":{\r\n    \"startDateTime\":\"2013-04-12T16:42:23+08:00\",\r\n    \"endDateTime\":\"2013-04-19T00:00:00+08:00\"\r\n    },\r\n\"billingAccount\":[\r\n    {\r\n    \"id\":\"123456\",\r\n    \"href\":\"http://serverlocation:port/billingManagement/billingAccount/123456\"\r\n    }\r\n],\r\n\"note\":[\r\n    {\r\n    \"text\":\"Quote following opportunity #2345\",\r\n    \"date\":\"2013-04-12T16:42:23+08:00\",\r\n    \"author\":\"Bill Dupont\"\r\n    }\r\n],\r\n\"characteristic\":[\r\n    {\r\n    \"name\":\"Business Unit\",\r\n    \"value\":\"London South West Cor^porate\"\r\n    }\r\n],\r\n\"customer\":{\r\n    \"id\":\"345221\",\r\n    \"href\":\"http://serverlocation:port/customerManagement/customer/345221\",\r\n    \"name\":\"John Doe\"\r\n},\r\n\"relatedParty\":[\r\n    {\r\n    \"id\":\"57\",\r\n    \"href\":\"http://serverlocation:port/partyManagement/partner/57\",\r\n    \"name\":\"Shinoju White\",\r\n    \"role\":\"authorizer\"\r\n    },\r\n    {\r\n    \"id\":\"4563\",\r\n    \"href\":\"http://serverlocation:port/partnerManagement/partner/4563\",\r\n    \"name\":\"Bill Dupont\",\r\n    \"role\":\"seller\"\r\n    }\r\n],\r\n\"agreement\":[\r\n    {\r\n    \"id\":\"45\",\r\n    \"href\":\"http://serverlocation:port/engagedPartyManagement/agreement/45\",\r\n    \"name\":\" standard disclaimer\"\r\n    }\r\n],\r\n\"quoteAuthorization\":[\r\n    {\r\n    \"authorizationDate\":\"2013-04-12T16:42:23+08:00\",\r\n    \"authorizationState\":\"approved\",\r\n    \"authorizationSignatureRepresentation\":\"digital\",\r\n    \"attachment\":{\r\n        \"id\":\"22\",\r\n        \"href\":\"http://serverlocation:port/documentManagement/attachment/22\",\r\n        \"type\":\"pdf\"\r\n    },\r\n    \"quoteProductOfferingPrice\":[{  \r\n        \"quotePriceAlteration\":{\r\n            \"name\":\"Global Discount\",\r\n            \"description\":\"5% for all recurring charge\",\r\n            \"validFor\":{\r\n\t\t\t\t\"startDateTime\":\"2013-04-19T16:42:23+08:00\"\r\n\t\t\t}\r\n        },\r\n\t\t\"priceType\":\"recurrent\",\r\n\t\t\"unitOfMeasure\":\"\",\r\n\t\t\"price\":{\r\n\t\t\t\"percentage\":5\r\n\t\t},\r\n\t\t\"recurringChargePeriod\":\"\",\r\n\t\t\"priceCondition\":\"applied if all quote items are purchased\"\r\n        }]\r\n    }\r\n],\r\n\"quoteItem\":[\r\n    {\r\n    \"id\":\"1\",\r\n    \"state\":\"InProgress\",\r\n    \"attachment\":{\r\n        \"id\":\"22\",\r\n        \"href\":\"http://serverlocation:port/documentManagement/attachment/TMFVoiceEXtraRationale.pdf\",\r\n        \"type\":\"pdf\"\r\n    },\r\n    \"relatedParty\":[\r\n        {\r\n        \"id\":\"345221\",\r\n        \"href\":\"http://serverlocation:port/partyManagement/customer/345221\",\r\n        \"name\":\"John Doe\",\r\n        \"role\":\"customer\"\r\n        },\r\n        {\r\n        \"id\":\"4563\",\r\n        \"href\":\"http://serverlocation:port/partnerManagement/partner/4563\",\r\n        \"name\":\"Bill Dupont\",\r\n        \"role\":\"seller\"\r\n        }\r\n    ],\r\n    \"productOffering\":{\r\n        \"id\":\"198\",\r\n        \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/198\"\r\n    },\r\n    \"product\":{ }\r\n    },\r\n    {\r\n    \"id\":\"2\",\r\n    \"state\":\"InProgress\",\r\n    \"note\":[\r\n        {\r\n        \"text\":\"xxxx\",\r\n        \"date\":\"2013-04-12T16:42:23+08:00\",\r\n        \"author\":\"Bill Dupont\"\r\n        }\r\n    ],\r\n    \"itemQuoteAuthorization\":[\r\n        {\r\n        \"authorizationDate\":\"2013-04-12T18:42:23+08:00\",\r\n        \"authorizationState\":\"approved\",\r\n        \"authorizationSignatureRepresentation\":\"digital \",\r\n        \"attachment\":{\r\n            \"id\":\"22\",\r\n            \"href\":\"http://serverlocation:port/documentManagement/attachment/22\",\r\n            \"type\":\"JPG\"\r\n        }\r\n        }\r\n    ],\r\n    \"productOffering\":{\r\n        \"id\":\" SamPhone i5s \",\r\n        \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/SamPhonei5s \"\r\n    },\r\n    \"product\":{\r\n        \"productCharacteristic\":[\r\n            {\r\n            \"name\":\"color\",\r\n            \"value\":\"pink\"\r\n            }\r\n        ]\r\n    }\r\n    },\r\n    {\r\n    \"id\":\"3\",\r\n    \"state\":\"InProgress\",\r\n    \"note\":[\r\n        {\r\n        \"text\":\"The leased line should be directly plugged from Joe’s Office\",\r\n        \"date\":\"2013-04-12T16:42:23+08:00\",\r\n        \"author\":\"Bill Dupont\"\r\n        }\r\n    ],\r\n    \"productOffering\":{\r\n        \"id\":\" TMF Fiber+\",\r\n        \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/TMFFiber+\"\r\n    },\r\n    \"product\":{\r\n        \"productCharacteristic\":[\r\n            {\r\n            \"name\":\"Speed\",\r\n            \"value\":\"100 Mo/s\"\r\n            },\r\n            {\r\n            \"name\":\"Site A\",\r\n            \"value\":\"12 Dupont Circle, 34511 Washington DC\"\r\n            },\r\n            {\r\n            \"name\":\"Site B\",\r\n            \"value\":\"436 25th Avenue, 34507 Washington DC\"\r\n            }\r\n        ]\r\n    }\r\n    },\r\n    {\r\n    \"id\":\"4\",\r\n    \"state\":\"InProgress\",\r\n    \"itemQuoteProductOfferingPrice\":[{\r\n        \"priceType\":\"recurrent\",\r\n        \"recurringChargePeriod\":\"monthly\",\r\n        \"priceCondition\":\"\",\r\n        \"quotePriceAlteration\":{\r\n\t\t\t\"name\":\"Discount on Bundle TV channel\",\r\n\t\t\t\"description\":\"Movie + sport is so fun\",\r\n\t\t\t\"validFor\":{\r\n\t\t\t\t\"startDateTime\":\"2013-04-19T16:42:23+08:00\"\r\n\t\t\t}\r\n\t\t},\r\n        \r\n        \"price\":{\r\n            \"override\":23.87\r\n        },\r\n        \"unitOfMeasure\":\"\"\r\n        \r\n    }],\r\n    \"productOffering\":{\r\n        \"id\":\"TM TV+\",\r\n        \"href\":\"http://serverlocation:port/catalogManagement/productOffering/BundleTMTV+\",\r\n        \"bundledProductOffering\":[\r\n            {\r\n            \"id\":\" Sport TV Channel\",\r\n            \"href\":\"http://serverlocation:port/catalogManagement/productOffering/SportChannel\"\r\n            },\r\n            {\r\n            \"id\":\" Movie TV channel\",\r\n            \"href\":\"http://serverlocation:port/catalogManagement/productOffering/MovieChannel\"\r\n            }\r\n        ]\r\n    }\r\n    }\r\n    ]\r\n}"
		},
		{
			"id": "84000cf5-233d-1854-2b1f-b816b9eaa544",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{Host}}/DSQuoteManagement/api/admin/quote/{{QUOTE_ID1}}:(version=1.0)",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains previousRows \" + dataOut.previousRows.toString()] = dataOut.previousRows.toString() !== \"\";\n\ntests[\"Response contains affectedRows \" + dataOut.affectedRows.toString()] = dataOut.affectedRows.toString() !== \"\";\n\ntests[\"Response contains currentRows \" + dataOut.currentRows.toString()] = dataOut.currentRows.toString() !== \"\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469689329628,
			"name": "[ADMIN] delete  quote with version",
			"description": "delete quote\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": []
		},
		{
			"id": "89566752-6274-87d9-7581-00cd7c070f79",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{Host}}/DSQuoteManagement/api/admin/quote/{{QUOTE_ID2}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains previousRows \" + dataOut.previousRows.toString()] = dataOut.previousRows.toString() !== \"\";\n\ntests[\"Response contains affectedRows \" + dataOut.affectedRows.toString()] = dataOut.affectedRows.toString() !== \"\";\n\ntests[\"Response contains currentRows \" + dataOut.currentRows.toString()] = dataOut.currentRows.toString() !== \"\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1470641156137,
			"name": "[ADMIN] delete  quote",
			"description": "delete quote\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": []
		},
		{
			"id": "99f01fbd-10f8-b3d9-c491-74c3bfd4651f",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote/{{QUOTE_ID1}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\n\nvar lastRequest = globals[\"lastRequest\"+postman.getEnvironmentVariable(\"testName\")];\n\nvar lastResponse= globals[\"lastResponse\"+postman.getEnvironmentVariable(\"testName\")];\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains VERSION \" + dataOut.version.toString()] = dataOut.version.toString() !== \"\";\n\ntests[\"Response contains HREF \" + dataOut.href.toString()] = dataOut.href.toString() !== \"\";\n\ntests[\"Response contains QUOTE_DATE \" + dataOut.quoteDate.toString()] = dataOut.quoteDate.toString() !== \"\";\n\ntests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + dataOut.effectiveQuoteCompletionDate.toString()] = dataOut.effectiveQuoteCompletionDate.toString() !== \"\";\n\ntests[\"Response contains CUSTOMER \" ] = typeof(dataOut.customer) !== 'undefined';\n\nif( typeof(dataOut.quoteItem) !== 'undefined' && dataOut.quoteItem.length > 0) {\n    var items = dataOut.quoteItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains quoteItem ID \" + items[i].id.toString() ] = items[i].id.toString() !== \"\";\n        tests[\"Response contains quoteItem productOffering\"] = typeof(items[i].productOffering) !== 'undefined';\n    }\n}\nvar dataIn = JSON.parse(lastRequest);\n\nif (dataIn.externalId) {\n    tests[\"POST Body Response externalId equals LastRequest externalId\"  ] = objectEquals(dataIn.externalId, dataOut.externalId);\n}\n\nif (dataIn.description) {\n    tests[\"POST Body Response description equals LastRequest description\"  ] = objectEquals(dataIn.description, dataOut.description);\n}\n\nif (dataIn.notificationContact) {\n    tests[\"POST Body Response notificationContact equals LastRequest notificationContact\"  ] = objectEquals(dataIn.notificationContact, dataOut.notificationContact);\n}\n\ntests[\"POST Body Response customer equals LastRequest customer\"  ] = objectEquals(dataIn.customer, dataOut.customer);\n\n\nif (dataIn.validFor) {\n    tests[\"POST Body Response validFor equals LastRequest validFor\"  ] = objectEquals(dataIn.validFor, dataOut.validFor);\n}\n\nif (dataIn.billingAccount) {\n    tests[\"POST Body Response billingAccount equals LastRequest billingAccount\"  ] = objectEquals(dataIn.billingAccount, dataOut.billingAccount);\n}\n\nif (dataIn.note) {\n    tests[\"POST Body Response note equals LastRequest note\"  ] = objectEquals(dataIn.note, dataOut.note);\n}\n\nif (dataIn.characteristic) {\n    tests[\"POST Body Response characteristic equals LastRequest characteristic\"  ] = objectEquals(dataIn.characteristic, dataOut.characteristic);\n}\n\nif (dataIn.relatedParty) {\n    tests[\"POST Body Response relatedParty equals LastRequest relatedParty\"  ] = objectEquals(dataIn.relatedParty, dataOut.relatedParty);\n}\n\n\nif (dataIn.agreement) {\n    tests[\"POST Body Response agreement equals LastRequest agreement\"  ] = objectEquals(dataIn.agreement, dataOut.agreement);\n}\n\nif (dataIn.quoteAuthorization) {\n    tests[\"POST Body Response quoteAuthorization equals LastRequest quoteAuthorization\"  ] = objectEquals(dataIn.quoteAuthorization, dataOut.quoteAuthorization);\n    \n}\n\nif (dataIn.quoteProductOfferingPrice) {\n    tests[\"POST Body Response quoteProductOfferingPrice LastRequest LastRequest quoteProductOfferingPrice\"  ] = objectEquals(dataIn.quoteProductOfferingPrice, dataIn.quoteProductOfferingPrice);\n}\n\ntests[\"POST Body Response quoteItem equals LastRequest quoteItem\"  ] = objectEquals(dataIn.quoteItem, dataOut.quoteItem);\n\nfunction objectEquals(v1, v2) {\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469687066574,
			"name": "get quote  with id ",
			"description": "get quote whith id\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": []
		},
		{
			"id": "9c8c29a5-ebdb-aadb-b896-35533bddb38b",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote/{{QUOTE_ID2}}:(version=1.0)",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1470640829678,
			"name": "partial update  quote with id and version",
			"description": "partial update quote with id and version\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": [],
			"rawModeData": "{\r\n    \"note\":[\r\n        {\r\n            \"text\":\"A free text detailing the note\"\r\n        }\r\n    ],\r\n    \"relatedParty\":[\r\n        {\r\n            \"role\":\"customer\",\r\n            \"id\":\"345221\",\r\n            \"href\":\"http://serverlocation:port/partyManagement/customer/345221\",\r\n            \"name\":\"John Doe\"\r\n        },\r\n        {\r\n            \"role\":\"seller\",\r\n            \"id\":\"4563\",\r\n            \"href\":\"http://serverlocation:port/partnerManagement/partner/4563\"\r\n        }\r\n    ],\r\n    \"quoteItem\":[\r\n        {\r\n            \"id\":\"1\",\r\n            \"action\":\"add\",\r\n            \"billingAccount\":[\r\n                {\r\n                    \"id\":\"1789\",\r\n                    \"href\":\"http://serverlocation:port/billingManagement/billingAccount/1789\"\r\n                }\r\n            ],\r\n            \"productOffering\":{\r\n                \"id\":\"42\",\r\n                \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/42\"\r\n            },\r\n            \"product\":{\r\n                \"productCharacteristic\":[\r\n                    {\r\n                        \"name\":\"Colour\",\r\n                        \"value\":\"White\"\r\n                    },\r\n                    {\r\n                        \"name\":\"Memory\",\r\n                    \"value\":\"16\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\":\"2\",\r\n            \"action\":\"modify\",\r\n            \"product\":{\r\n                \"id\":\"456\",\r\n                \"href\":\"http: //serverlocation: port/inventoryManagement/product/456\",\r\n                \"relatedParty\":[\r\n                    {\r\n                        \"role\":\"user\",\r\n                        \"id\":\"5667443\",\r\n                        \"href\":\"http://serverlocation:port/partyManagement/user/5667443\",\r\n                        \"name\":\"Jimmy Doe\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\":\"3\",\r\n            \"action\":\"delete\",\r\n            \"product\":{\r\n                \"id\":\"456\",\r\n                \"href\":\"http: //serverlocation: port/inventoryManagement/product/456\"\r\n                }\r\n        }\r\n    ]\r\n}"
		},
		{
			"id": "a9e7996e-f766-55d3-2d1d-d1566fbbbb4f",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote?id={{QUOTE_ID1}}&version=1.0",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (typeof(dataOut)!=='undefined' && dataOut.length>0) {\n    var items = dataOut;\n    for (var i = 0; i < items.length; i++) {\n        tests[\"Response contains ID \" + items[i].id.toString()] = items[i].id.toString() !== \"\";\n\n        tests[\"Response contains VERSION \" + items[i].version.toString()] = items[i].version.toString() !== \"\";\n\n        tests[\"Response contains HREF \" + items[i].href.toString()] = items[i].href.toString() !== \"\";\n\n        tests[\"Response contains QUOTE_DATE \" + items[i].quoteDate.toString()] = items[i].quoteDate.toString() !== \"\";\n\n        tests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + items[i].effectiveQuoteCompletionDate.toString()] = items[i].effectiveQuoteCompletionDate.toString() !== \"\";\n\n        tests[\"Response contains CUSTOMER \" ] = typeof(items[i].customer) !== 'undefined';\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1470633992014,
			"name": "get quote  with filter",
			"description": "get quote whith filter",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": []
		},
		{
			"id": "d62f15e2-dbf1-bc92-c6e8-c01926af295e",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote/{{QUOTE_ID2}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1470640821116,
			"name": "partial update  quote with id",
			"description": "partial update quote with id\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": [],
			"rawModeData": "{\r\n    \"note\":[\r\n        {\r\n            \"text\":\"A free text detailing the note\"\r\n        }\r\n    ],\r\n    \"relatedParty\":[\r\n        {\r\n            \"role\":\"customer\",\r\n            \"id\":\"345221\",\r\n            \"href\":\"http://serverlocation:port/partyManagement/customer/345221\",\r\n            \"name\":\"John Doe\"\r\n        },\r\n        {\r\n            \"role\":\"seller\",\r\n            \"id\":\"4563\",\r\n            \"href\":\"http://serverlocation:port/partnerManagement/partner/4563\"\r\n        }\r\n    ],\r\n    \"quoteItem\":[\r\n        {\r\n            \"id\":\"1\",\r\n            \"action\":\"add\",\r\n            \"billingAccount\":[\r\n                {\r\n                    \"id\":\"1789\",\r\n                    \"href\":\"http://serverlocation:port/billingManagement/billingAccount/1789\"\r\n                }\r\n            ],\r\n            \"productOffering\":{\r\n                \"id\":\"42\",\r\n                \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/42\"\r\n            },\r\n            \"product\":{\r\n                \"productCharacteristic\":[\r\n                    {\r\n                        \"name\":\"Colour\",\r\n                        \"value\":\"White\"\r\n                    },\r\n                    {\r\n                        \"name\":\"Memory\",\r\n                    \"value\":\"16\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\":\"2\",\r\n            \"action\":\"modify\",\r\n            \"product\":{\r\n                \"id\":\"456\",\r\n                \"href\":\"http: //serverlocation: port/inventoryManagement/product/456\",\r\n                \"relatedParty\":[\r\n                    {\r\n                        \"role\":\"user\",\r\n                        \"id\":\"5667443\",\r\n                        \"href\":\"http://serverlocation:port/partyManagement/user/5667443\",\r\n                        \"name\":\"Jimmy Doe\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\":\"3\",\r\n            \"action\":\"delete\",\r\n            \"product\":{\r\n                \"id\":\"456\",\r\n                \"href\":\"http: //serverlocation: port/inventoryManagement/product/456\"\r\n                }\r\n        }\r\n    ]\r\n}"
		},
		{
			"id": "d79291d0-d96c-9d6d-40b9-3c2f16bbf419",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains VERSION \" + dataOut.version.toString()] = dataOut.version.toString() !== \"\";\n\ntests[\"Response contains HREF \" + dataOut.href.toString()] = dataOut.href.toString() !== \"\";\n\ntests[\"Response contains QUOTE_DATE \" + dataOut.quoteDate.toString()] = dataOut.quoteDate.toString() !== \"\";\n\ntests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + dataOut.effectiveQuoteCompletionDate.toString()] = dataOut.effectiveQuoteCompletionDate.toString() !== \"\";\n\ntests[\"Response contains CUSTOMER \" ] = typeof(dataOut.customer) !== 'undefined';\n\npostman.setGlobalVariable(\"QUOTE_ID1\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\nvar dataIn = JSON.parse(request.data);\n\nconsole.log(\"request \" + dataIn);\nconsole.log(\"request type\" + typeof(dataIn));\n\n\nif( typeof(dataOut.quoteItem) !== 'undefined' && dataOut.quoteItem.length > 0) {\n    var items = dataOut.quoteItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains quoteItem ID \" + items[i].id.toString() ] = items[i].id.toString() !== \"\";\n        tests[\"Response contains quoteItem productOffering\"] = typeof(items[i].productOffering) !== 'undefined';\n    }\n}\nif (dataIn.externalId) {\n    tests[\"POST Body Response externalId equals Request externalId\"  ] = objectEquals(dataIn.externalId, dataOut.externalId);\n}\n\nif (dataIn.description) {\n    tests[\"POST Body Response description equals Request description\"  ] = objectEquals(dataIn.description, dataOut.description);\n}\n\nif (dataIn.notificationContact) {\n    tests[\"POST Body Response notificationContact equals Request notificationContact\"  ] = objectEquals(dataIn.notificationContact, dataOut.notificationContact);\n}\n\ntests[\"POST Body Response customer equals Request customer\"  ] = objectEquals(dataIn.customer, dataOut.customer);\n\n\nif (dataIn.validFor) {\n    tests[\"POST Body Response validFor equals Request validFor\"  ] = objectEquals(dataIn.validFor, dataOut.validFor);\n}\n\nif (dataIn.billingAccount) {\n    tests[\"POST Body Response billingAccount equals Request billingAccount\"  ] = objectEquals(dataIn.billingAccount, dataOut.billingAccount);\n}\n\nif (dataIn.note) {\n    tests[\"POST Body Response note equals Request note\"  ] = objectEquals(dataIn.note, dataOut.note);\n}\n\nif (dataIn.characteristic) {\n    tests[\"POST Body Response characteristic equals Request characteristic\"  ] = objectEquals(dataIn.characteristic, dataOut.characteristic);\n}\n\nif (dataIn.relatedParty) {\n    tests[\"POST Body Response relatedParty equals Request relatedParty\"  ] = objectEquals(dataIn.relatedParty, dataOut.relatedParty);\n}\n\nif (dataIn.agreement) {\n    tests[\"POST Body Response agreement equals Request agreement\"  ] = objectEquals(dataIn.agreement, dataOut.agreement);\n}\n\nif (dataIn.quoteAuthorization) {\n    tests[\"POST Body Response quoteAuthorization equals Request quoteAuthorization\"  ] = objectEquals(dataIn.quoteAuthorization, dataOut.quoteAuthorization);\n    \n}\n\nif (dataIn.quoteProductOfferingPrice) {\n    tests[\"POST Body Response quoteProductOfferingPrice equals Request quoteProductOfferingPrice\"  ] = objectEquals(dataIn.quoteProductOfferingPrice, dataOut.quoteProductOfferingPrice);\n}\n\ntests[\"POST Body Response quoteItem equals Request quoteItem\"  ] = objectEquals(dataIn.quoteItem, dataOut.quoteItem);\n\nfunction objectEquals(v1, v2) {\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469687019211,
			"name": "create a  quote",
			"description": "create a quote\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": [],
			"rawModeData": "{\r\n\"id\":\"42\",\r\n\r\n\"externalId\":\"QuoteForTheConsumer_42\",\r\n\"description\":\"A wonderful 42 quote for brand new products\",\r\n\"category\":\"corporate\",\r\n\"state\":\"InProgress\",\r\n\"version\":\"1.0\",\r\n\r\n\"effectiveQuoteCompletionDate\":\"\",\r\n\"quoteCompletionDate\":\"2013-04-19T16:42:23+08:00\",\r\n\"notificationContact\":\"bill.dupont@hotmail.com\",\r\n\"validFor\":{\r\n    \"startDateTime\":\"2013-04-12T16:42:23+08:00\",\r\n    \"endDateTime\":\"2013-04-19T00:00:00+08:00\"\r\n    },\r\n\"billingAccount\":[\r\n    {\r\n    \"id\":\"123456\",\r\n    \"href\":\"http://serverlocation:port/billingManagement/billingAccount/123456\"\r\n    }\r\n],\r\n\"note\":[\r\n    {\r\n    \"text\":\"Quote following opportunity #2345\",\r\n    \"date\":\"2013-04-12T16:42:23+08:00\",\r\n    \"author\":\"Bill Dupont\"\r\n    }\r\n],\r\n\"characteristic\":[\r\n    {\r\n    \"name\":\"Business Unit\",\r\n    \"value\":\"London South West Cor^porate\"\r\n    }\r\n],\r\n\"customer\":{\r\n    \"id\":\"345221\",\r\n    \"href\":\"http://serverlocation:port/customerManagement/customer/345221\",\r\n    \"name\":\"John Doe\"\r\n},\r\n\"relatedParty\":[\r\n    {\r\n    \"id\":\"57\",\r\n    \"href\":\"http://serverlocation:port/partyManagement/partner/57\",\r\n    \"name\":\"Shinoju White\",\r\n    \"role\":\"authorizer\"\r\n    },\r\n    {\r\n    \"id\":\"4563\",\r\n    \"href\":\"http://serverlocation:port/partnerManagement/partner/4563\",\r\n    \"name\":\"Bill Dupont\",\r\n    \"role\":\"seller\"\r\n    }\r\n],\r\n\"agreement\":[\r\n    {\r\n    \"id\":\"45\",\r\n    \"href\":\"http://serverlocation:port/engagedPartyManagement/agreement/45\",\r\n    \"name\":\" standard disclaimer\"\r\n    }\r\n],\r\n\"quoteAuthorization\":[\r\n    {\r\n    \"authorizationDate\":\"2013-04-12T16:42:23+08:00\",\r\n    \"authorizationState\":\"approved\",\r\n    \"authorizationSignatureRepresentation\":\"digital\",\r\n    \"attachment\":{\r\n        \"id\":\"22\",\r\n        \"href\":\"http://serverlocation:port/documentManagement/attachment/22\",\r\n        \"type\":\"pdf\"\r\n    },\r\n    \"quoteProductOfferingPrice\":[{  \r\n        \"quotePriceAlteration\":{\r\n            \"name\":\"Global Discount\",\r\n            \"description\":\"5% for all recurring charge\",\r\n            \"validFor\":{\r\n\t\t\t\t\"startDateTime\":\"2013-04-19T16:42:23+08:00\"\r\n\t\t\t}\r\n        },\r\n\t\t\"priceType\":\"recurrent\",\r\n\t\t\"unitOfMeasure\":\"\",\r\n\t\t\"price\":{\r\n\t\t\t\"percentage\":5\r\n\t\t},\r\n\t\t\"recurringChargePeriod\":\"\",\r\n\t\t\"priceCondition\":\"applied if all quote items are purchased\"\r\n        }]\r\n    }\r\n],\r\n\"quoteItem\":[\r\n    {\r\n    \"id\":\"1\",\r\n    \"state\":\"InProgress\",\r\n    \"attachment\":{\r\n        \"id\":\"22\",\r\n        \"href\":\"http://serverlocation:port/documentManagement/attachment/TMFVoiceEXtraRationale.pdf\",\r\n        \"type\":\"pdf\"\r\n    },\r\n    \"relatedParty\":[\r\n        {\r\n        \"id\":\"345221\",\r\n        \"href\":\"http://serverlocation:port/partyManagement/customer/345221\",\r\n        \"name\":\"John Doe\",\r\n        \"role\":\"customer\"\r\n        },\r\n        {\r\n        \"id\":\"4563\",\r\n        \"href\":\"http://serverlocation:port/partnerManagement/partner/4563\",\r\n        \"name\":\"Bill Dupont\",\r\n        \"role\":\"seller\"\r\n        }\r\n    ],\r\n    \"productOffering\":{\r\n        \"id\":\"198\",\r\n        \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/198\"\r\n    },\r\n    \"product\":{ }\r\n    },\r\n    {\r\n    \"id\":\"2\",\r\n    \"state\":\"InProgress\",\r\n    \"note\":[\r\n        {\r\n        \"text\":\"xxxx\",\r\n        \"date\":\"2013-04-12T16:42:23+08:00\",\r\n        \"author\":\"Bill Dupont\"\r\n        }\r\n    ],\r\n    \"itemQuoteAuthorization\":[\r\n        {\r\n        \"authorizationDate\":\"2013-04-12T18:42:23+08:00\",\r\n        \"authorizationState\":\"approved\",\r\n        \"authorizationSignatureRepresentation\":\"digital \",\r\n        \"attachment\":{\r\n            \"id\":\"22\",\r\n            \"href\":\"http://serverlocation:port/documentManagement/attachment/22\",\r\n            \"type\":\"JPG\"\r\n        }\r\n        }\r\n    ],\r\n    \"productOffering\":{\r\n        \"id\":\" SamPhone i5s \",\r\n        \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/SamPhonei5s \"\r\n    },\r\n    \"product\":{\r\n        \"productCharacteristic\":[\r\n            {\r\n            \"name\":\"color\",\r\n            \"value\":\"pink\"\r\n            }\r\n        ]\r\n    }\r\n    },\r\n    {\r\n    \"id\":\"3\",\r\n    \"state\":\"InProgress\",\r\n    \"note\":[\r\n        {\r\n        \"text\":\"The leased line should be directly plugged from Joe’s Office\",\r\n        \"date\":\"2013-04-12T16:42:23+08:00\",\r\n        \"author\":\"Bill Dupont\"\r\n        }\r\n    ],\r\n    \"productOffering\":{\r\n        \"id\":\" TMF Fiber+\",\r\n        \"href\":\"http: //serverlocation: port/catalogManagement/productOffering/TMFFiber+\"\r\n    },\r\n    \"product\":{\r\n        \"productCharacteristic\":[\r\n            {\r\n            \"name\":\"Speed\",\r\n            \"value\":\"100 Mo/s\"\r\n            },\r\n            {\r\n            \"name\":\"Site A\",\r\n            \"value\":\"12 Dupont Circle, 34511 Washington DC\"\r\n            },\r\n            {\r\n            \"name\":\"Site B\",\r\n            \"value\":\"436 25th Avenue, 34507 Washington DC\"\r\n            }\r\n        ]\r\n    }\r\n    },\r\n    {\r\n    \"id\":\"4\",\r\n    \"state\":\"InProgress\",\r\n    \"itemQuoteProductOfferingPrice\":[{\r\n        \"priceType\":\"recurrent\",\r\n        \"recurringChargePeriod\":\"monthly\",\r\n        \"priceCondition\":\"\",\r\n        \"quotePriceAlteration\":{\r\n\t\t\t\"name\":\"Discount on Bundle TV channel\",\r\n\t\t\t\"description\":\"Movie + sport is so fun\",\r\n\t\t\t\"validFor\":{\r\n\t\t\t\t\"startDateTime\":\"2013-04-19T16:42:23+08:00\"\r\n\t\t\t}\r\n\t\t},\r\n        \r\n        \"price\":{\r\n            \"override\":23.87\r\n        },\r\n        \"unitOfMeasure\":\"\"\r\n        \r\n    }],\r\n    \"productOffering\":{\r\n        \"id\":\"TM TV+\",\r\n        \"href\":\"http://serverlocation:port/catalogManagement/productOffering/BundleTMTV+\",\r\n        \"bundledProductOffering\":[\r\n            {\r\n            \"id\":\" Sport TV Channel\",\r\n            \"href\":\"http://serverlocation:port/catalogManagement/productOffering/SportChannel\"\r\n            },\r\n            {\r\n            \"id\":\" Movie TV channel\",\r\n            \"href\":\"http://serverlocation:port/catalogManagement/productOffering/MovieChannel\"\r\n            }\r\n        ]\r\n    }\r\n    }\r\n    ]\r\n}"
		},
		{
			"id": "ed18fec3-a862-c616-3b45-7c78251bf84e",
			"headers": "Accept: application/json\nContent-Type: application/json\n",
			"url": "{{quoteManagementApi}}/quote",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (typeof(dataOut)!=='undefined' && dataOut.length>0) {\n    var items = dataOut;\n    for (var i = 0; i < items.length; i++) {\n        tests[\"Response contains ID \" + items[i].id.toString()] = items[i].id.toString() !== \"\";\n\n        tests[\"Response contains VERSION \" + items[i].version.toString()] = items[i].version.toString() !== \"\";\n\n        tests[\"Response contains HREF \" + items[i].href.toString()] = items[i].href.toString() !== \"\";\n\n        tests[\"Response contains QUOTE_DATE \" + items[i].quoteDate.toString()] = items[i].quoteDate.toString() !== \"\";\n\n        tests[\"Response contains EFFECTIVE_QUOTE_COMPLETION_DATE \" + items[i].effectiveQuoteCompletionDate.toString()] = items[i].effectiveQuoteCompletionDate.toString() !== \"\";\n\n        tests[\"Response contains CUSTOMER \" ] = typeof(items[i].customer) !== 'undefined';\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1470367718221,
			"name": "find  all quote",
			"description": "find quote\n",
			"collectionId": "d53b2802-92a5-d7aa-2b21-f1a8d349c445",
			"responses": []
		}
	]
}